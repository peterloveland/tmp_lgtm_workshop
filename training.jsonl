{"messages": [{"role": "user", "content": "Generate code that will run in an eval() function. It will first create a frame with a horizontal layout, then create two labels with the text 'bug' and 'help-wanted'."},{"role": "assistant", "content": "const frame = figma.createFrame();frame.layoutMode = 'HORIZONTAL';frame.primaryAxisSizingMode = 'AUTO';frame.counterAxisSizingMode = 'AUTO';frame.itemSpacing = 8;const labelComponent = await figma.importComponentByKeyAsync('b7baaae989913b05e57c9d2238d7d5c3a7e336a7');const label1 = labelComponent.createInstance();label1.setProperties({ 'text#18973:0': 'bug' });frame.appendChild(label1);const label2 = labelComponent.createInstance();label2.setProperties({ 'text#18973:0': 'help-wanted' });frame.appendChild(label2);figma.notify('Created a frame with labels for a GitHub issue about React.');"}]}
{"messages": [{"role": "user", "content": "Generate code that will run in an eval() function. It will first create a frame with a horizontal layout, then create two labels with the text 'severe' and 'good-first-issue'."},{"role": "assistant", "content": "const frame = figma.createFrame();frame.layoutMode = 'VERTICAL';frame.primaryAxisSizingMode = 'AUTO';frame.counterAxisSizingMode = 'AUTO';frame.itemSpacing = 8;const labelComponent = await figma.importComponentByKeyAsync('b7baaae989913b05e57c9d2238d7d5c3a7e336a7');const label1 = labelComponent.createInstance();label1.setProperties({ 'text#18973:0': 'severe' });frame.appendChild(label1);const label2 = labelComponent.createInstance();label2.setProperties({ 'text#18973:0': 'good-first-issue' });frame.appendChild(label2);figma.notify('Created a frame with labels for a GitHub issue about React.');"}]}
{"messages": [{"role": "user", "content": "Generate code that will run in an eval() function. It will first create a frame with a vertical layout, then create two labels with the text 'enhancement' and 'documentation'."},{"role": "assistant", "content": "const frame = figma.createFrame();frame.layoutMode = 'VERTICAL';frame.primaryAxisSizingMode = 'AUTO';frame.counterAxisSizingMode = 'AUTO';frame.itemSpacing = 10;const labelComponent = await figma.importComponentByKeyAsync('b7baaae989913b05e57c9d2238d7d5c3a7e336a7');const label1 = labelComponent.createInstance();label1.setProperties({ 'text#18973:0': 'enhancement' });frame.appendChild(label1);const label2 = labelComponent.createInstance();label2.setProperties({ 'text#18973:0': 'documentation' });frame.appendChild(label2);figma.notify('Created a frame with enhancement and documentation labels.');"}]}
{"messages": [{"role": "user", "content": "Generate code that will run in an eval() function. It will first create a frame with a horizontal layout, then create two labels with the text 'question' and 'duplicate'."},{"role": "assistant", "content": "const frame = figma.createFrame();frame.layoutMode = 'HORIZONTAL';frame.primaryAxisSizingMode = 'AUTO';frame.counterAxisSizingMode = 'AUTO';frame.itemSpacing = 12;const labelComponent = await figma.importComponentByKeyAsync('b7baaae989913b05e57c9d2238d7d5c3a7e336a7');const label1 = labelComponent.createInstance();label1.setProperties({ 'text#18973:0': 'question' });frame.appendChild(label1);const label2 = labelComponent.createInstance();label2.setProperties({ 'text#18973:0': 'duplicate' });frame.appendChild(label2);figma.notify('Created a frame with question and duplicate labels.');"}]}
{"messages": [{"role": "user", "content": "Generate code that will run in an eval() function. It will first create a frame with a vertical layout, then create two labels with the text 'invalid' and 'wontfix'."},{"role": "assistant", "content": "const frame = figma.createFrame();frame.layoutMode = 'VERTICAL';frame.primaryAxisSizingMode = 'AUTO';frame.counterAxisSizingMode = 'AUTO';frame.itemSpacing = 15;const labelComponent = await figma.importComponentByKeyAsync('b7baaae989913b05e57c9d2238d7d5c3a7e336a7');const label1 = labelComponent.createInstance();label1.setProperties({ 'text#18973:0': 'invalid' });frame.appendChild(label1);const label2 = labelComponent.createInstance();label2.setProperties({ 'text#18973:0': 'wontfix' });frame.appendChild(label2);figma.notify('Created a frame with invalid and wontfix labels.');"}]}
{"messages": [{"role": "user", "content": "Generate code that will run in an eval() function. It will first create a frame with a horizontal layout, then create two labels with the text 'enhancement' and 'question'."},{"role": "assistant", "content": "const frame = figma.createFrame();frame.layoutMode = 'HORIZONTAL';frame.primaryAxisSizingMode = 'AUTO';frame.counterAxisSizingMode = 'AUTO';frame.itemSpacing = 18;const labelComponent = await figma.importComponentByKeyAsync('b7baaae989913b05e57c9d2238d7d5c3a7e336a7');const label1 = labelComponent.createInstance();label1.setProperties({ 'text#18973:0': 'enhancement' });frame.appendChild(label1);const label2 = labelComponent.createInstance();label2.setProperties({ 'text#18973:0': 'question' });frame.appendChild(label2);figma.notify('Created a frame with enhancement and question labels.');"}]}
{"messages": [{"role": "user", "content": "Generate code that will run in an eval() function. It will first create a frame with a vertical layout, then create two labels with the text 'question' and 'wontfix'."},{"role": "assistant", "content": "const frame = figma.createFrame();frame.layoutMode = 'VERTICAL';frame.primaryAxisSizingMode = 'AUTO';frame.counterAxisSizingMode = 'AUTO';frame.itemSpacing = 20;const labelComponent = await figma.importComponentByKeyAsync('b7baaae989913b05e57c9d2238d7d5c3a7e336a7');const label1 = labelComponent.createInstance();label1.setProperties({ 'text#18973:0': 'question' });frame.appendChild(label1);const label2 = labelComponent.createInstance();label2.setProperties({ 'text#18973:0': 'wontfix' });frame.appendChild(label2);figma.notify('Created a frame with question and wontfix labels.');"}]}
{"messages": [{"role": "user", "content": "Generate code that will run in an eval() function. It will first create a frame with a horizontal layout, then create two labels with the text 'bug' and 'invalid'."},{"role": "assistant", "content": "const frame = figma.createFrame();frame.layoutMode = 'HORIZONTAL';frame.primaryAxisSizingMode = 'AUTO';frame.counterAxisSizingMode = 'AUTO';frame.itemSpacing = 22;const labelComponent = await figma.importComponentByKeyAsync('b7baaae989913b05e57c9d2238d7d5c3a7e336a7');const label1 = labelComponent.createInstance();label1.setProperties({ 'text#18973:0': 'bug' });frame.appendChild(label1);const label2 = labelComponent.createInstance();label2.setProperties({ 'text#18973:0': 'invalid' });frame.appendChild(label2);figma.notify('Created a frame with bug and invalid labels.');"}]}
{"messages": [{"role": "user", "content": "Generate code that will run in an eval() function. It will first create a frame with a vertical layout, then create two labels with the text 'duplicate' and 'question'."},{"role": "assistant", "content": "const frame = figma.createFrame();frame.layoutMode = 'VERTICAL';frame.primaryAxisSizingMode = 'AUTO';frame.counterAxisSizingMode = 'AUTO';frame.itemSpacing = 9;const labelComponent = await figma.importComponentByKeyAsync('b7baaae989913b05e57c9d2238d7d5c3a7e336a7');const label1 = labelComponent.createInstance();label1.setProperties({ 'text#18973:0': 'duplicate' });frame.appendChild(label1);const label2 = labelComponent.createInstance();label2.setProperties({ 'text#18973:0': 'question' });frame.appendChild(label2);figma.notify('Created a frame with duplicate and question labels.');"}]}
{"messages": [{"role": "user", "content": "Generate code that will run in an eval() function. It will first create a frame with a horizontal layout, then create two labels with the text 'discussion' and 'feature'."},{"role": "assistant", "content": "const frame = figma.createFrame();frame.layoutMode = 'HORIZONTAL';frame.primaryAxisSizingMode = 'AUTO';frame.counterAxisSizingMode = 'AUTO';frame.itemSpacing = 14;const labelComponent = await figma.importComponentByKeyAsync('b7baaae989913b05e57c9d2238d7d5c3a7e336a7');const label1 = labelComponent.createInstance();label1.setProperties({ 'text#18973:0': 'discussion' });frame.appendChild(label1);const label2 = labelComponent.createInstance();label2.setProperties({ 'text#18973:0': 'feature' });frame.appendChild(label2);figma.notify('Created a frame with discussion and feature labels.');"}]}
{"messages": [{"role": "user", "content": "Generate code that will run in an eval() function. It will first create a frame with a vertical layout, then create two labels with the text 'duplicate' and 'support'."},{"role": "assistant", "content": "const frame = figma.createFrame();frame.layoutMode = 'VERTICAL';frame.primaryAxisSizingMode = 'AUTO';frame.counterAxisSizingMode = 'AUTO';frame.itemSpacing = 12;const labelComponent = await figma.importComponentByKeyAsync('b7baaae989913b05e57c9d2238d7d5c3a7e336a7');const label1 = labelComponent.createInstance();label1.setProperties({ 'text#18973:0': 'duplicate' });frame.appendChild(label1);const label2 = labelComponent.createInstance();label2.setProperties({ 'text#18973:0': 'support' });frame.appendChild(label2);figma.notify('Created a frame with duplicate and support labels.');"}]}
{"messages": [{"role": "user", "content": "Generate code that will run in an eval() function. It will first create a frame with a horizontal layout, then create two labels with the text 'bug' and 'investigate'."},{"role": "assistant", "content": "const frame = figma.createFrame();frame.layoutMode = 'HORIZONTAL';frame.primaryAxisSizingMode = 'AUTO';frame.counterAxisSizingMode = 'AUTO';frame.itemSpacing = 16;const labelComponent = await figma.importComponentByKeyAsync('b7baaae989913b05e57c9d2238d7d5c3a7e336a7');const label1 = labelComponent.createInstance();label1.setProperties({ 'text#18973:0': 'bug' });frame.appendChild(label1);const label2 = labelComponent.createInstance();label2.setProperties({ 'text#18973:0': 'investigate' });frame.appendChild(label2);figma.notify('Created a frame with bug and investigate labels.');"}]}
{"messages": [{"role": "user", "content": "Generate code that will run in an eval() function. It will first create a frame with a vertical layout, then create two labels with the text 'performance' and 'security'."},{"role": "assistant", "content": "const frame = figma.createFrame();frame.layoutMode = 'VERTICAL';frame.primaryAxisSizingMode = 'AUTO';frame.counterAxisSizingMode = 'AUTO';frame.itemSpacing = 14;const labelComponent = await figma.importComponentByKeyAsync('b7baaae989913b05e57c9d2238d7d5c3a7e336a7');const label1 = labelComponent.createInstance();label1.setProperties({ 'text#18973:0': 'performance' });frame.appendChild(label1);const label2 = labelComponent.createInstance();label2.setProperties({ 'text#18973:0': 'security' });frame.appendChild(label2);figma.notify('Created a frame with performance and security labels.');"}]}
{"messages": [{"role": "user", "content": "Generate code that will run in an eval() function. It will first create a frame with a vertical layout, then create two labels with the text 'backend' and 'frontend'."},{"role": "assistant", "content": "const frame = figma.createFrame();frame.layoutMode = 'VERTICAL';frame.primaryAxisSizingMode = 'AUTO';frame.counterAxisSizingMode = 'AUTO';frame.itemSpacing = 14;const labelComponent = await figma.importComponentByKeyAsync('b7baaae989913b05e57c9d2238d7d5c3a7e336a7');const label1 = labelComponent.createInstance();label1.setProperties({ 'text#18973:0': 'backend' });frame.appendChild(label1);const label2 = labelComponent.createInstance();label2.setProperties({ 'text#18973:0': 'frontend' });frame.appendChild(label2);figma.notify('Created a frame with backend and frontend labels.');"}]}
{"messages": [{"role": "user", "content": "Generate code that will run in an eval() function. It will first create a frame with a horizontal layout, then create two labels with the text 'enhancement' and 'feature'."},{"role": "assistant", "content": "const frame = figma.createFrame();frame.layoutMode = 'HORIZONTAL';frame.primaryAxisSizingMode = 'AUTO';frame.counterAxisSizingMode = 'AUTO';frame.itemSpacing = 18;const labelComponent = await figma.importComponentByKeyAsync('b7baaae989913b05e57c9d2238d7d5c3a7e336a7');const label1 = labelComponent.createInstance();label1.setProperties({ 'text#18973:0': 'enhancement' });frame.appendChild(label1);const label2 = labelComponent.createInstance();label2.setProperties({ 'text#18973:0': 'feature' });frame.appendChild(label2);figma.notify('Created a frame with enhancement and feature labels.');"}]}
{"messages": [{"role": "user", "content": "Generate code that will run in an eval() function. It will first create a frame with a vertical layout, then create two labels with the text 'design' and 'usability'."},{"role": "assistant", "content": "const frame = figma.createFrame();frame.layoutMode = 'VERTICAL';frame.primaryAxisSizingMode = 'AUTO';frame.counterAxisSizingMode = 'AUTO';frame.itemSpacing = 6;const labelComponent = await figma.importComponentByKeyAsync('b7baaae989913b05e57c9d2238d7d5c3a7e336a7');const label1 = labelComponent.createInstance();label1.setProperties({ 'text#18973:0': 'design' });frame.appendChild(label1);const label2 = labelComponent.createInstance();label2.setProperties({ 'text#18973:0': 'usability' });frame.appendChild(label2);figma.notify('Created a frame with design and usability labels.');"}]}
{"messages": [{"role": "user", "content": "Generate code that will run in an eval() function. It will create a label and add a fill that might be suitable for the context of the label. For example 'bug' or 'severe' will be red"},{"role": "assistant", "content": "const frame = figma.createFrame();frame.layoutMode = 'VERTICAL';frame.primaryAxisSizingMode = 'AUTO';frame.counterAxisSizingMode = 'AUTO';frame.itemSpacing = 6;const labelComponent = await figma.importComponentByKeyAsync('b7baaae989913b05e57c9d2238d7d5c3a7e336a7');const label1 = labelComponent.createInstance();label1.setProperties({ 'text#18973:0': 'bug' });label1.fills = [{type: 'SOLID', color: {r: 1, g: 0.6, b: 0.6}}];frame.appendChild(label1);figma.notify('Created a red bug label');"}]}
{"messages": [{"role": "user", "content": "Generate code that will run in an eval() function. It will create a label and add a fill that might be suitable for the context of the label. For example 'good-first-issue' would be green"},{"role": "assistant", "content": "const frame = figma.createFrame();frame.layoutMode = 'VERTICAL';frame.primaryAxisSizingMode = 'AUTO';frame.counterAxisSizingMode = 'AUTO';frame.itemSpacing = 6;const labelComponent = await figma.importComponentByKeyAsync('b7baaae989913b05e57c9d2238d7d5c3a7e336a7');const label1 = labelComponent.createInstance();label1.setProperties({ 'text#18973:0': 'good-first-issue' });label1.fills = [{type: 'SOLID', color: {r: 0.2, g: 0.8, b: 0.4}}];frame.appendChild(label1);figma.notify('Created a red bug label');"}]}
{"messages": [{"role": "user", "content": "Generate code that will run in an eval() function. It will make a blue label"},{"role": "assistant", "content": "const frame = figma.createFrame();frame.layoutMode = 'VERTICAL';frame.primaryAxisSizingMode = 'AUTO';frame.counterAxisSizingMode = 'AUTO';frame.itemSpacing = 6;const labelComponent = await figma.importComponentByKeyAsync('b7baaae989913b05e57c9d2238d7d5c3a7e336a7');const label1 = labelComponent.createInstance();label1.setProperties({ 'text#18973:0': 'good-first-issue', 'backgroundColor#eb6d71ff': '#eb6d71ff' });frame.appendChild(label1);figma.notify('Created a red bug label');"},{"role": "user", "content": "No that's not the correct way to add a fill. Fills are added like 'label1.fills = [{type: 'SOLID', color: {r: 0.2, g: 0.8, b: 0.4}}];'"}]}
{"messages": [{"role": "user", "content": "Generate code that will run in an eval() function. It will make a label"},{"role": "assistant", "content": "const frame = figma.createFrame();frame.layoutMode = 'VERTICAL';frame.primaryAxisSizingMode = 'AUTO';frame.counterAxisSizingMode = 'AUTO';frame.itemSpacing = 6;const labelComponent = await figma.importComponentByKeyAsync('b7baaae989913b05e57c9d2238d7d5c3a7e336a7');const label1 = labelComponent.createInstance();label1.setProperties({ 'text#label': 'good-first-issue' });frame.appendChild(label1);figma.notify('Created a red bug label');"},{"role": "user", "content": "No that's not the correct way to set the text of the label. The prop name must always be text#18973:0, so text#label won't work"}]}
{"messages": [{"role": "user", "content": "Generate code that will run in an eval() function. It will make a label"},{"role": "assistant", "content": "const frame = figma.createFrame();frame.layoutMode = 'VERTICAL';frame.primaryAxisSizingMode = 'AUTO';frame.counterAxisSizingMode = 'AUTO';frame.itemSpacing = 6;const labelComponent = await figma.importComponentByKeyAsync('b7baaae989913b05e57c9d2238d7d5c3a7e336a7');const label1 = labelComponent.createInstance();label1.setProperty('text#18973:0', 'needs triage');;frame.appendChild(label1);figma.notify('Created a red bug label');"},{"role": "user", "content": "No that's not the correct way to set the properties. setProperty doesn't exist. setProperties({}) is the correct way to do it, even if there's only one property"}]}
{"messages": [{"role": "user", "content": "Generate code that will run in an eval() function. It will create a frame"},{"role": "assistant", "content": "const frame = figma.createFrame('Frame for demo')"},{"role": "user", "content": "That causes an error. createFrame doesnt' take any paramaters, just leave as createFrame()"}]}
{"messages": [{"role": "user", "content": "Generate code that will run in an eval() function. It will create a frame"},{"role": "assistant", "content": "const frame = figma.createFrame('Frame for demo');frame.orientation = 'HORIZONTAL';"},{"role": "user", "content": "That causes an error. orientation doesn't exist on frame. Use layoutMode instead. For example frame.layoutMode = 'HORIZONTAL';"}]}
{"messages": [{"role": "system", "content": "Generate code that will run in an eval() function. You import buttons from the primer figma library. The button has a schema like: {'key': 'cb00e72ab4a6c96a34f8952eb917536fae2b9abb','properties': {'leadingVisual#137:0': {'value': '2012:20','type': 'INSTANCE_SWAP','preferredValues': []},'trailingVisual?#20826:0': {'value': false,'type': 'BOOLEAN'},'counter?#13825:134': {'value': false,'type': 'BOOLEAN'},'dropdown?#13825:201': {'value': false,'type': 'BOOLEAN'},'leadingVisual?#13825:0': {'value': false,'type': 'BOOLEAN'},'trailingVisual#20826:151': {'value': '2012:18','type': 'INSTANCE_SWAP','preferredValues': [{'type': 'COMPONENT','key': '1419c78a69cc37c91d3f840eb161148711b0ce94'},{'type': 'COMPONENT','key': 'a63928690869caaa0cf45849391532e34a76279e'},{'type': 'COMPONENT','key': '3548e52192e1161e3354b48574bbba741dd5f1f7'}]},'variant': {'value': 'secondary' | 'primary' | 'danger' | 'invisible','type': 'VARIANT','boundVariables': {}},'size': {'value': 'small' | 'medium' | 'large','type': 'VARIANT','boundVariables': {}},'state': {'value': 'rest' | 'focus' | 'hover' | 'pressed' | 'disabled' | 'inactive','type': 'VARIANT','boundVariables': {}},'alignContent': {'value': 'start' | 'center','type': 'VARIANT','boundVariables': {}}}. Do not deviate from this schema, if you pick a different key then it won't import the correct component. Properties can be set with e.g. instance.setProperties({ 'stringProp': 'value1', 'trailingVisual?#20826:0': true });For example to set the size of the component to 'small' and 'primary' you would do instance.setProperties({ 'size': 'small', 'variant': 'primary' });To set the text of Button setButtonText(instance, '{string}');"}, {"role": "assistant", "content": "{\n  \"result\": \"const component = await figma.importComponentByKeyAsync('cb00e72ab4a6c96a34f8952eb917536fae2b9abb'); const instance = component.createInstance(); instance.setProperties({ 'size': 'small', 'variant': 'primary' }); setButtonText(instance, 'Submit'); figma.notify('Created a small primary button with text Submit');\"\n}"}]}
{"messages": [{"role": "system", "content": "Generate code that will run in an eval() function. You import buttons from the primer figma library. The button has a schema like: {'key': 'cb00e72ab4a6c96a34f8952eb917536fae2b9abb','properties': {'leadingVisual#137:0': {'value': '2012:20','type': 'INSTANCE_SWAP','preferredValues': []},'trailingVisual?#20826:0': {'value': false,'type': 'BOOLEAN'},'counter?#13825:134': {'value': false,'type': 'BOOLEAN'},'dropdown?#13825:201': {'value': false,'type': 'BOOLEAN'},'leadingVisual?#13825:0': {'value': false,'type': 'BOOLEAN'},'trailingVisual#20826:151': {'value': '2012:18','type': 'INSTANCE_SWAP','preferredValues': [{'type': 'COMPONENT','key': '1419c78a69cc37c91d3f840eb161148711b0ce94'},{'type': 'COMPONENT','key': 'a63928690869caaa0cf45849391532e34a76279e'},{'type': 'COMPONENT','key': '3548e52192e1161e3354b48574bbba741dd5f1f7'}]},'variant': {'value': 'secondary' | 'primary' | 'danger' | 'invisible','type': 'VARIANT','boundVariables': {}},'size': {'value': 'small' | 'medium' | 'large','type': 'VARIANT','boundVariables': {}},'state': {'value': 'rest' | 'focus' | 'hover' | 'pressed' | 'disabled' | 'inactive','type': 'VARIANT','boundVariables': {}},'alignContent': {'value': 'start' | 'center','type': 'VARIANT','boundVariables': {}}}. Do not deviate from this schema, if you pick a different key then it won't import the correct component. Properties can be set with e.g. instance.setProperties({ 'stringProp': 'value1', 'trailingVisual?#20826:0': true });For example to set the size of the component to 'small' and 'primary' you would do instance.setProperties({ 'size': 'small', 'variant': 'primary' });To set the text of Button setButtonText(instance, '{string}');"}, {"role": "assistant", "content": "{\n  \"result\": \"const component = await figma.importComponentByKeyAsync('b7baaae57e0d7b47e989d2a0d9d9b9d6c8f7e3a7'); const instance = component.createInstance(); instance.setProperties({ 'size': 'small', 'variant': 'primary' }); setButtonText(instance, 'Submit'); figma.notify('Created a small primary button with text Submit');\"\n}"}, {"role": "user", "content": "No that's not the correct key. The key for a button should always be 'cb00e72ab4a6c96a34f8952eb917536fae2b9abb'. Under no circumstance should a button ever use a different key"}]}
{"messages": [{"role": "user", "content": "Generate code that will run in an eval() function. It will create a frame with a horizontal layout, then add two buttons with the text 'Submit' and 'Cancel'."},{"role": "assistant", "content": "const frame = figma.createFrame();frame.layoutMode = 'HORIZONTAL';frame.primaryAxisSizingMode = 'AUTO';frame.counterAxisSizingMode = 'AUTO';frame.itemSpacing = 8;const buttonComponent = await figma.importComponentByKeyAsync('cb00e72ab4a6c96a34f8952eb917536fae2b9abb');const button1 = buttonComponent.createInstance();button1.setProperties({ 'size': 'small', 'variant': 'primary' });setButtonText(button1, 'Submit');frame.appendChild(button1);const button2 = buttonComponent.createInstance();button2.setProperties({ 'size': 'small', 'variant': 'danger' });setButtonText(button2, 'Cancel');frame.appendChild(button2);figma.notify('Created a frame with Submit and Cancel buttons.');"}]}
{"messages": [{"role": "user", "content": "Generate code that will run in an eval() function. It will create a frame with a vertical layout, then add two buttons with the text 'Save' and 'Delete'."},{"role": "assistant", "content": "const frame = figma.createFrame();frame.layoutMode = 'VERTICAL';frame.primaryAxisSizingMode = 'AUTO';frame.counterAxisSizingMode = 'AUTO';frame.itemSpacing = 10;const buttonComponent = await figma.importComponentByKeyAsync('cb00e72ab4a6c96a34f8952eb917536fae2b9abb');const button1 = buttonComponent.createInstance();button1.setProperties({ 'size': 'medium', 'variant': 'primary' });setButtonText(button1, 'Save');frame.appendChild(button1);const button2 = buttonComponent.createInstance();button2.setProperties({ 'size': 'medium', 'variant': 'danger' });setButtonText(button2, 'Delete');frame.appendChild(button2);figma.notify('Created a frame with Save and Delete buttons.');"}]}
{"messages": [{"role": "user", "content": "Generate code that will run in an eval() function. Change the text of this button. If you can't find an obvious property that might change the text, search for a text node in the instances children, e.g. const textNode = instance.findChild((node) => node.type === 'TEXT') as TextNode;await figma.loadFontAsync({ family: 'SF Pro Text', style: 'Semibold' });textNode.characters = text;"},{"role": "assistant", "content": "I can't find a property to change the text"}]}
{"messages": [{"role": "user", "content": "Generate code that will run in an eval() function. small cancel danger button"},{"role": "assistant", "content": "const component = await figma.importComponentByKeyAsync('cb00e72ab4a6c96a34f8952eb917536fae2b9abb');const instance = component.createInstance();instance.setProperties({ 'size': 'small', 'variant': 'danger' });const textNode = instance.findChild((node) => node.type === 'TEXT') as TextNode;await figma.loadFontAsync({ 'family': 'SF Pro Text', 'style': 'Semibold' });textNode.characters = 'cancel'"}]}
{"messages": [{"role": "user", "content": "Generate code that will run in an eval() function. small render primary button"},{"role": "assistant", "content": "const component = await figma.importComponentByKeyAsync('cb00e72ab4a6c96a34f8952eb917536fae2b9abb');const instance = component.createInstance();instance.setProperties({ 'size': 'small', 'variant': 'danger' });const textNode = instance.findChild((node) => node.type === 'TEXT') as TextNode;await figma.loadFontAsync({ 'family': 'SF Pro Text', 'style': 'Semibold' });textNode.characters = 'render'"}]}
{"messages": [{"role": "system", "content": "You are a Figma plugin code generating assistant that outputs JSON as a response like { result: string }. The result is the required code to generate something in Figma using the plugin api which we will then eval() and run. Whenever you need to write something in text, first load in the required font with loadFontAsync. This will always be family: 'SF Pro Text', style: 'Semibold'. Never change this. Always start response with: const buttonComponent = await figma.importComponentByKeyAsync('cb00e72ab4a6c96a34f8952eb917536fae2b9abb'); never change this. Create instances of components like const instance = buttonComponent.createInstance();. Properties are set with e.g. instance.setProperties({ 'stringProp': 'value1', 'trailingVisual?#20826:0': true }); For example to set the size of the component to 'small' and 'primary' you would do instance.setProperties({ 'size': 'small', 'variant': 'primary' });If you think you need to set some text, but can't find an obvious property that might change the text, search for a text node in the instances children, e.g. const textNode = instance.findChild((node) => node.type === 'TEXT');await figma.loadFontAsync({ family: 'SF Pro Text', style: 'Semibold' });textNode.characters = text; Always family: 'SF Pro Text', style: 'Semibold'. Never change this."},{"role": "user", "content": "cancel button"},{"role": "assistant", "content": "const buttonComponent = await figma.importComponentByKeyAsync('cb00e72ab4a6c96a34f8952eb917536fae2b9abb');const instance = buttonComponent.createInstance();const textNode = instance.findChild((node) => node.type === 'TEXT');await figma.loadFontAsync({ 'family': 'SF Pro Text', 'style': 'Semibold' });textNode.characters = 'cancel';instance.setProperties({ 'size': 'small', 'variant': 'secondary' });"}]}
{"messages": [{"role": "system", "content": "You are a Figma plugin code generating assistant that outputs JSON as a response like { result: string }. The result is the required code to generate something in Figma using the plugin api which we will then eval() and run. Whenever you need to write something in text, first load in the required font with loadFontAsync. This will always be family: 'SF Pro Text', style: 'Semibold'. Never change this. Always start response with: const buttonComponent = await figma.importComponentByKeyAsync('cb00e72ab4a6c96a34f8952eb917536fae2b9abb'); never change this. Create instances of components like const instance = buttonComponent.createInstance();. Properties are set with e.g. instance.setProperties({ 'stringProp': 'value1', 'trailingVisual?#20826:0': true }); For example to set the size of the component to 'small' and 'primary' you would do instance.setProperties({ 'size': 'small', 'variant': 'primary' });If you think you need to set some text, but can't find an obvious property that might change the text, search for a text node in the instances children, e.g. const textNode = instance.findChild((node) => node.type === 'TEXT');await figma.loadFontAsync({ family: 'SF Pro Text', style: 'Semibold' });textNode.characters = text; Always family: 'SF Pro Text', style: 'Semibold'. Never change this."},{"role": "user", "content": "submit button"},{"role": "assistant", "content": "const buttonComponent = await figma.importComponentByKeyAsync('cb00e72ab4a6c96a34f8952eb917536fae2b9abb');const instance = buttonComponent.createInstance();const textNode = instance.findChild((node) => node.type === 'TEXT');await figma.loadFontAsync({ 'family': 'SF Pro Text', 'style': 'Semibold' });textNode.characters = 'submit';instance.setProperties({ 'size': 'small', 'variant': 'primary' });"}]}