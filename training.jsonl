{"messages": [{"role": "user", "content": "Generate code that will run in an eval() function. It will first create a frame with a horizontal layout, then create two labels with the text 'bug' and 'help-wanted'."},{"role": "assistant", "content": "const frame = figma.createFrame();frame.layoutMode = 'HORIZONTAL';frame.primaryAxisSizingMode = 'AUTO';frame.counterAxisSizingMode = 'AUTO';frame.itemSpacing = 8;const labelComponent = await figma.importComponentByKeyAsync('b7baaae989913b05e57c9d2238d7d5c3a7e336a7');const label1 = labelComponent.createInstance();label1.setProperties({ 'text#18973:0': 'bug' });frame.appendChild(label1);const label2 = labelComponent.createInstance();label2.setProperties({ 'text#18973:0': 'help-wanted' });frame.appendChild(label2);figma.notify('Created a frame with labels for a GitHub issue about React.');"}]}
{"messages": [{"role": "user", "content": "Generate code that will run in an eval() function. It will first create a frame with a horizontal layout, then create two labels with the text 'severe' and 'good-first-issue'."},{"role": "assistant", "content": "const frame = figma.createFrame();frame.layoutMode = 'VERTICAL';frame.primaryAxisSizingMode = 'AUTO';frame.counterAxisSizingMode = 'AUTO';frame.itemSpacing = 8;const labelComponent = await figma.importComponentByKeyAsync('b7baaae989913b05e57c9d2238d7d5c3a7e336a7');const label1 = labelComponent.createInstance();label1.setProperties({ 'text#18973:0': 'severe' });frame.appendChild(label1);const label2 = labelComponent.createInstance();label2.setProperties({ 'text#18973:0': 'good-first-issue' });frame.appendChild(label2);figma.notify('Created a frame with labels for a GitHub issue about React.');"}]}
{"messages": [{"role": "user", "content": "Generate code that will run in an eval() function. It will first create a frame with a vertical layout, then create two labels with the text 'enhancement' and 'documentation'."},{"role": "assistant", "content": "const frame = figma.createFrame();frame.layoutMode = 'VERTICAL';frame.primaryAxisSizingMode = 'AUTO';frame.counterAxisSizingMode = 'AUTO';frame.itemSpacing = 10;const labelComponent = await figma.importComponentByKeyAsync('b7baaae989913b05e57c9d2238d7d5c3a7e336a7');const label1 = labelComponent.createInstance();label1.setProperties({ 'text#18973:0': 'enhancement' });frame.appendChild(label1);const label2 = labelComponent.createInstance();label2.setProperties({ 'text#18973:0': 'documentation' });frame.appendChild(label2);figma.notify('Created a frame with enhancement and documentation labels.');"}]}
{"messages": [{"role": "user", "content": "Generate code that will run in an eval() function. It will first create a frame with a horizontal layout, then create two labels with the text 'question' and 'duplicate'."},{"role": "assistant", "content": "const frame = figma.createFrame();frame.layoutMode = 'HORIZONTAL';frame.primaryAxisSizingMode = 'AUTO';frame.counterAxisSizingMode = 'AUTO';frame.itemSpacing = 12;const labelComponent = await figma.importComponentByKeyAsync('b7baaae989913b05e57c9d2238d7d5c3a7e336a7');const label1 = labelComponent.createInstance();label1.setProperties({ 'text#18973:0': 'question' });frame.appendChild(label1);const label2 = labelComponent.createInstance();label2.setProperties({ 'text#18973:0': 'duplicate' });frame.appendChild(label2);figma.notify('Created a frame with question and duplicate labels.');"}]}
{"messages": [{"role": "user", "content": "Generate code that will run in an eval() function. It will first create a frame with a vertical layout, then create two labels with the text 'invalid' and 'wontfix'."},{"role": "assistant", "content": "const frame = figma.createFrame();frame.layoutMode = 'VERTICAL';frame.primaryAxisSizingMode = 'AUTO';frame.counterAxisSizingMode = 'AUTO';frame.itemSpacing = 15;const labelComponent = await figma.importComponentByKeyAsync('b7baaae989913b05e57c9d2238d7d5c3a7e336a7');const label1 = labelComponent.createInstance();label1.setProperties({ 'text#18973:0': 'invalid' });frame.appendChild(label1);const label2 = labelComponent.createInstance();label2.setProperties({ 'text#18973:0': 'wontfix' });frame.appendChild(label2);figma.notify('Created a frame with invalid and wontfix labels.');"}]}
{"messages": [{"role": "user", "content": "Generate code that will run in an eval() function. It will first create a frame with a horizontal layout, then create two labels with the text 'enhancement' and 'question'."},{"role": "assistant", "content": "const frame = figma.createFrame();frame.layoutMode = 'HORIZONTAL';frame.primaryAxisSizingMode = 'AUTO';frame.counterAxisSizingMode = 'AUTO';frame.itemSpacing = 18;const labelComponent = await figma.importComponentByKeyAsync('b7baaae989913b05e57c9d2238d7d5c3a7e336a7');const label1 = labelComponent.createInstance();label1.setProperties({ 'text#18973:0': 'enhancement' });frame.appendChild(label1);const label2 = labelComponent.createInstance();label2.setProperties({ 'text#18973:0': 'question' });frame.appendChild(label2);figma.notify('Created a frame with enhancement and question labels.');"}]}
{"messages": [{"role": "user", "content": "Generate code that will run in an eval() function. It will first create a frame with a vertical layout, then create two labels with the text 'question' and 'wontfix'."},{"role": "assistant", "content": "const frame = figma.createFrame();frame.layoutMode = 'VERTICAL';frame.primaryAxisSizingMode = 'AUTO';frame.counterAxisSizingMode = 'AUTO';frame.itemSpacing = 20;const labelComponent = await figma.importComponentByKeyAsync('b7baaae989913b05e57c9d2238d7d5c3a7e336a7');const label1 = labelComponent.createInstance();label1.setProperties({ 'text#18973:0': 'question' });frame.appendChild(label1);const label2 = labelComponent.createInstance();label2.setProperties({ 'text#18973:0': 'wontfix' });frame.appendChild(label2);figma.notify('Created a frame with question and wontfix labels.');"}]}
{"messages": [{"role": "user", "content": "Generate code that will run in an eval() function. It will first create a frame with a horizontal layout, then create two labels with the text 'bug' and 'invalid'."},{"role": "assistant", "content": "const frame = figma.createFrame();frame.layoutMode = 'HORIZONTAL';frame.primaryAxisSizingMode = 'AUTO';frame.counterAxisSizingMode = 'AUTO';frame.itemSpacing = 22;const labelComponent = await figma.importComponentByKeyAsync('b7baaae989913b05e57c9d2238d7d5c3a7e336a7');const label1 = labelComponent.createInstance();label1.setProperties({ 'text#18973:0': 'bug' });frame.appendChild(label1);const label2 = labelComponent.createInstance();label2.setProperties({ 'text#18973:0': 'invalid' });frame.appendChild(label2);figma.notify('Created a frame with bug and invalid labels.');"}]}
{"messages": [{"role": "user", "content": "Generate code that will run in an eval() function. It will first create a frame with a vertical layout, then create two labels with the text 'duplicate' and 'question'."},{"role": "assistant", "content": "const frame = figma.createFrame();frame.layoutMode = 'VERTICAL';frame.primaryAxisSizingMode = 'AUTO';frame.counterAxisSizingMode = 'AUTO';frame.itemSpacing = 9;const labelComponent = await figma.importComponentByKeyAsync('b7baaae989913b05e57c9d2238d7d5c3a7e336a7');const label1 = labelComponent.createInstance();label1.setProperties({ 'text#18973:0': 'duplicate' });frame.appendChild(label1);const label2 = labelComponent.createInstance();label2.setProperties({ 'text#18973:0': 'question' });frame.appendChild(label2);figma.notify('Created a frame with duplicate and question labels.');"}]}
{"messages": [{"role": "user", "content": "Generate code that will run in an eval() function. It will first create a frame with a horizontal layout, then create two labels with the text 'discussion' and 'feature'."},{"role": "assistant", "content": "const frame = figma.createFrame();frame.layoutMode = 'HORIZONTAL';frame.primaryAxisSizingMode = 'AUTO';frame.counterAxisSizingMode = 'AUTO';frame.itemSpacing = 14;const labelComponent = await figma.importComponentByKeyAsync('b7baaae989913b05e57c9d2238d7d5c3a7e336a7');const label1 = labelComponent.createInstance();label1.setProperties({ 'text#18973:0': 'discussion' });frame.appendChild(label1);const label2 = labelComponent.createInstance();label2.setProperties({ 'text#18973:0': 'feature' });frame.appendChild(label2);figma.notify('Created a frame with discussion and feature labels.');"}]}
{"messages": [{"role": "user", "content": "Generate code that will run in an eval() function. It will first create a frame with a vertical layout, then create two labels with the text 'duplicate' and 'support'."},{"role": "assistant", "content": "const frame = figma.createFrame();frame.layoutMode = 'VERTICAL';frame.primaryAxisSizingMode = 'AUTO';frame.counterAxisSizingMode = 'AUTO';frame.itemSpacing = 12;const labelComponent = await figma.importComponentByKeyAsync('b7baaae989913b05e57c9d2238d7d5c3a7e336a7');const label1 = labelComponent.createInstance();label1.setProperties({ 'text#18973:0': 'duplicate' });frame.appendChild(label1);const label2 = labelComponent.createInstance();label2.setProperties({ 'text#18973:0': 'support' });frame.appendChild(label2);figma.notify('Created a frame with duplicate and support labels.');"}]}
{"messages": [{"role": "user", "content": "Generate code that will run in an eval() function. It will first create a frame with a horizontal layout, then create two labels with the text 'bug' and 'investigate'."},{"role": "assistant", "content": "const frame = figma.createFrame();frame.layoutMode = 'HORIZONTAL';frame.primaryAxisSizingMode = 'AUTO';frame.counterAxisSizingMode = 'AUTO';frame.itemSpacing = 16;const labelComponent = await figma.importComponentByKeyAsync('b7baaae989913b05e57c9d2238d7d5c3a7e336a7');const label1 = labelComponent.createInstance();label1.setProperties({ 'text#18973:0': 'bug' });frame.appendChild(label1);const label2 = labelComponent.createInstance();label2.setProperties({ 'text#18973:0': 'investigate' });frame.appendChild(label2);figma.notify('Created a frame with bug and investigate labels.');"}]}
{"messages": [{"role": "user", "content": "Generate code that will run in an eval() function. It will first create a frame with a vertical layout, then create two labels with the text 'performance' and 'security'."},{"role": "assistant", "content": "const frame = figma.createFrame();frame.layoutMode = 'VERTICAL';frame.primaryAxisSizingMode = 'AUTO';frame.counterAxisSizingMode = 'AUTO';frame.itemSpacing = 14;const labelComponent = await figma.importComponentByKeyAsync('b7baaae989913b05e57c9d2238d7d5c3a7e336a7');const label1 = labelComponent.createInstance();label1.setProperties({ 'text#18973:0': 'performance' });frame.appendChild(label1);const label2 = labelComponent.createInstance();label2.setProperties({ 'text#18973:0': 'security' });frame.appendChild(label2);figma.notify('Created a frame with performance and security labels.');"}]}
{"messages": [{"role": "user", "content": "Generate code that will run in an eval() function. It will first create a frame with a vertical layout, then create two labels with the text 'backend' and 'frontend'."},{"role": "assistant", "content": "const frame = figma.createFrame();frame.layoutMode = 'VERTICAL';frame.primaryAxisSizingMode = 'AUTO';frame.counterAxisSizingMode = 'AUTO';frame.itemSpacing = 14;const labelComponent = await figma.importComponentByKeyAsync('b7baaae989913b05e57c9d2238d7d5c3a7e336a7');const label1 = labelComponent.createInstance();label1.setProperties({ 'text#18973:0': 'backend' });frame.appendChild(label1);const label2 = labelComponent.createInstance();label2.setProperties({ 'text#18973:0': 'frontend' });frame.appendChild(label2);figma.notify('Created a frame with backend and frontend labels.');"}]}
{"messages": [{"role": "user", "content": "Generate code that will run in an eval() function. It will first create a frame with a horizontal layout, then create two labels with the text 'enhancement' and 'feature'."},{"role": "assistant", "content": "const frame = figma.createFrame();frame.layoutMode = 'HORIZONTAL';frame.primaryAxisSizingMode = 'AUTO';frame.counterAxisSizingMode = 'AUTO';frame.itemSpacing = 18;const labelComponent = await figma.importComponentByKeyAsync('b7baaae989913b05e57c9d2238d7d5c3a7e336a7');const label1 = labelComponent.createInstance();label1.setProperties({ 'text#18973:0': 'enhancement' });frame.appendChild(label1);const label2 = labelComponent.createInstance();label2.setProperties({ 'text#18973:0': 'feature' });frame.appendChild(label2);figma.notify('Created a frame with enhancement and feature labels.');"}]}
{"messages": [{"role": "user", "content": "Generate code that will run in an eval() function. It will first create a frame with a vertical layout, then create two labels with the text 'design' and 'usability'."},{"role": "assistant", "content": "const frame = figma.createFrame();frame.layoutMode = 'VERTICAL';frame.primaryAxisSizingMode = 'AUTO';frame.counterAxisSizingMode = 'AUTO';frame.itemSpacing = 6;const labelComponent = await figma.importComponentByKeyAsync('b7baaae989913b05e57c9d2238d7d5c3a7e336a7');const label1 = labelComponent.createInstance();label1.setProperties({ 'text#18973:0': 'design' });frame.appendChild(label1);const label2 = labelComponent.createInstance();label2.setProperties({ 'text#18973:0': 'usability' });frame.appendChild(label2);figma.notify('Created a frame with design and usability labels.');"}]}
{"messages": [{"role": "user", "content": "Generate code that will run in an eval() function. It will create a label and add a fill that might be suitable for the context of the label. For example 'bug' or 'severe' will be red"},{"role": "assistant", "content": "const frame = figma.createFrame();frame.layoutMode = 'VERTICAL';frame.primaryAxisSizingMode = 'AUTO';frame.counterAxisSizingMode = 'AUTO';frame.itemSpacing = 6;const labelComponent = await figma.importComponentByKeyAsync('b7baaae989913b05e57c9d2238d7d5c3a7e336a7');const label1 = labelComponent.createInstance();label1.setProperties({ 'text#18973:0': 'bug' });label1.fills = [{type: 'SOLID', color: {r: 1, g: 0.6, b: 0.6}}];frame.appendChild(label1);figma.notify('Created a red bug label');"}]}
{"messages": [{"role": "user", "content": "Generate code that will run in an eval() function. It will create a label and add a fill that might be suitable for the context of the label. For example 'good-first-issue' would be green"},{"role": "assistant", "content": "const frame = figma.createFrame();frame.layoutMode = 'VERTICAL';frame.primaryAxisSizingMode = 'AUTO';frame.counterAxisSizingMode = 'AUTO';frame.itemSpacing = 6;const labelComponent = await figma.importComponentByKeyAsync('b7baaae989913b05e57c9d2238d7d5c3a7e336a7');const label1 = labelComponent.createInstance();label1.setProperties({ 'text#18973:0': 'good-first-issue' });label1.fills = [{type: 'SOLID', color: {r: 0.2, g: 0.8, b: 0.4}}];frame.appendChild(label1);figma.notify('Created a red bug label');"}]}
{"messages": [{"role": "user", "content": "Generate code that will run in an eval() function. It will make a blue label"},{"role": "assistant", "content": "const frame = figma.createFrame();frame.layoutMode = 'VERTICAL';frame.primaryAxisSizingMode = 'AUTO';frame.counterAxisSizingMode = 'AUTO';frame.itemSpacing = 6;const labelComponent = await figma.importComponentByKeyAsync('b7baaae989913b05e57c9d2238d7d5c3a7e336a7');const label1 = labelComponent.createInstance();label1.setProperties({ 'text#18973:0': 'good-first-issue', 'backgroundColor#eb6d71ff': '#eb6d71ff' });frame.appendChild(label1);figma.notify('Created a red bug label');"},{"role": "user", "content": "No that's not the correct way to add a fill. Fills are added like 'label1.fills = [{type: 'SOLID', color: {r: 0.2, g: 0.8, b: 0.4}}];'"}]}
{"messages": [{"role": "user", "content": "Generate code that will run in an eval() function. It will make a label"},{"role": "assistant", "content": "const frame = figma.createFrame();frame.layoutMode = 'VERTICAL';frame.primaryAxisSizingMode = 'AUTO';frame.counterAxisSizingMode = 'AUTO';frame.itemSpacing = 6;const labelComponent = await figma.importComponentByKeyAsync('b7baaae989913b05e57c9d2238d7d5c3a7e336a7');const label1 = labelComponent.createInstance();label1.setProperties({ 'text#label': 'good-first-issue' });frame.appendChild(label1);figma.notify('Created a red bug label');"},{"role": "user", "content": "No that's not the correct way to set the text of the label. The prop name must always be text#18973:0, so text#label won't work"}]}
{"messages": [{"role": "user", "content": "Generate code that will run in an eval() function. It will make a label"},{"role": "assistant", "content": "const frame = figma.createFrame();frame.layoutMode = 'VERTICAL';frame.primaryAxisSizingMode = 'AUTO';frame.counterAxisSizingMode = 'AUTO';frame.itemSpacing = 6;const labelComponent = await figma.importComponentByKeyAsync('b7baaae989913b05e57c9d2238d7d5c3a7e336a7');const label1 = labelComponent.createInstance();label1.setProperty('text#18973:0', 'needs triage');;frame.appendChild(label1);figma.notify('Created a red bug label');"},{"role": "user", "content": "No that's not the correct way to set the properties. setProperty doesn't exist. setProperties({}) is the correct way to do it, even if there's only one property"}]}
{"messages": [{"role": "user", "content": "Generate code that will run in an eval() function. It will create a frame"},{"role": "assistant", "content": "const frame = figma.createFrame('Frame for demo')"},{"role": "user", "content": "That causes an error. createFrame doesnt' take any paramaters, just leave as createFrame()"}]}
{"messages": [{"role": "user", "content": "Generate code that will run in an eval() function. It will create a frame"},{"role": "assistant", "content": "const frame = figma.createFrame('Frame for demo');frame.orientation = 'HORIZONTAL';"},{"role": "user", "content": "That causes an error. orientation doesn't exist on frame. Use layoutMode instead. For example frame.layoutMode = 'HORIZONTAL';"}]}